{
  "questions": [
    {
      "id": "1",
      "namespace": "app-team1",
      "machineHostname": "datascientest-machine",
      "question": "Create a pod named `nginx-pod` using the `nginx:1.19` image.\n\nEnsure the pod is created in the `app-team1` namespace and has the label `run=nginx-pod`.\n\nVerify that the pod is in the Running state.",
      "concepts": ["pods", "labels", "namespaces"],
      "verification": [
        {
          "id": "1",
          "description": "Pod exists in correct namespace",
          "verificationScriptFile": "q1_s1_validate_namespace.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Pod has correct image",
          "verificationScriptFile": "q1_s2_validate_pod.sh",
          "expectedOutput": "0",
          "weightage": 1
        },
        {
          "id": "3",
          "description": "Pod has correct status and configuration",
          "verificationScriptFile": "q1_s3_validate_pod_status.sh",
          "expectedOutput": "0",
          "weightage": 2
        }
      ]
    },
    {
      "id": "2",
      "namespace": "default",
      "machineHostname": "datascientest-machine",
      "question": "Create a static pod named `static-web` on `datascientest-machine` using the `nginx:1.19` image.\nThe pod should expose port `80`.\n\nPlace the static pod manifest file at `/etc/kubernetes/manifests/static-web.yaml`.",
      "concepts": ["static pods", "node configuration"],
      "verification": [
        {
          "id": "1",
          "description": "Static pod manifest exists",
          "verificationScriptFile": "q2_s1_validate_static_pod.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Static pod manifest has correct configuration",
          "verificationScriptFile": "q2_s2_validate_static_pod_config.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "3",
      "namespace": "storage",
      "machineHostname": "datascientest-machine",
      "question": "Create a StorageClass named `fast-storage` with the provisioner `kubernetes.io/no-provisioner`.\n\nCreate a PersistentVolumeClaim named `data-pvc` in the `storage` namespace that uses this StorageClass.\n\nSet the access mode to `ReadWriteOnce` and request `1Gi` of storage.",
      "concepts": ["storage", "storage classes", "persistent volumes"],
      "verification": [
        {
          "id": "1",
          "description": "StorageClass and PVC exist",
          "verificationScriptFile": "q3_s1_validate_storageclass.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "StorageClass has correct configuration",
          "verificationScriptFile": "q3_s2_validate_pvc.sh",
          "expectedOutput": "0",
          "weightage": 2
        }
      ]
    },
    {
      "id": "4",
      "namespace": "monitoring",
      "machineHostname": "datascientest-machine",
      "question": "Create a pod named `logger` in the `monitoring` namespace with two containers:\n\n1. A `busybox` container that writes logs to `/var/log/app.log`\n2. A `fluentd` container that reads logs from the same location\n\nUse an `emptyDir` volume named `log-volume` to share logs between containers. Mount this volume at `/var/log` in both containers.\n\nEnsure both containers are running.",
      "concepts": ["multi-container pods", "volumes", "logging"],
      "verification": [
        {
          "id": "1",
          "description": "Pod and containers exist",
          "verificationScriptFile": "q4_s1_validate_pod.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Logging functionality is working",
          "verificationScriptFile": "q4_s2_validate_logging.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "5",
      "namespace": "default",
      "machineHostname": "datascientest-machine",
      "question": "Create a ServiceAccount named `app-sa` in the `default` namespace.\n\nCreate a Role named `pod-reader` that allows listing and getting pods.\n\nCreate a RoleBinding named `read-pods` that binds the `pod-reader` Role to the `app-sa` ServiceAccount.",
      "concepts": ["RBAC", "service accounts", "roles"],
      "verification": [
        {
          "id": "1",
          "description": "Service Account exist",
          "verificationScriptFile": "q5_s1_validate_sa.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Role has correct permissions",
          "verificationScriptFile": "q5_s2_validate_rbac.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "3",
          "description": "RBAC permissions are correctly configured",
          "verificationScriptFile": "q5_s3_validate_rbac_permissions.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "6",
      "namespace": "networking",
      "machineHostname": "datascientest-machine",
      "question": "Create a NetworkPolicy named `db-policy` in the `networking` namespace that:\n\n1. Allows pods with label `role=frontend` to connect to pods with label `role=db` on port `3306`\n2. Denies all other ingress traffic to pods with label `role=db`\n\nEnsure the policy is correctly applied to pods with the matching labels.",
      "concepts": ["network policies", "pod networking"],
      "verification": [
        {
          "id": "1",
          "description": "NetworkPolicy exists",
          "verificationScriptFile": "q6_s1_validate_networkpolicy.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Network policy is correctly configured and effective",
          "verificationScriptFile": "q6_s2_validate_network_policy_effect.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "7",
      "namespace": "default",
      "machineHostname": "datascientest-machine",
      "question": "Create a deployment named `web-app` in the `default` namespace with `3` replicas using the `nginx:1.19` image.\n\nCreate a NodePort service named `web-service` that exposes the deployment on port `80`.\n\nEnsure the pods are distributed across multiple nodes using an appropriate pod anti-affinity rule.",
      "concepts": ["deployments", "services", "pod distribution"],
      "verification": [
        {
          "id": "1",
          "description": "Deployment and service exist",
          "verificationScriptFile": "q7_s1_validate_deployment.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Service has correct configuration",
          "verificationScriptFile": "q7_s2_validate_service.sh",
          "expectedOutput": "0",
          "weightage": 2
        }
      ]
    },
    {
      "id": "8",
      "namespace": "monitoring",
      "machineHostname": "datascientest-machine",
      "question": "Create a pod named `resource-pod` in the `monitoring` namespace using the `nginx` image with the following resource requirements:\n\n- CPU request: `100m`\n- CPU limit: `200m`\n- Memory request: `128Mi`\n- Memory limit: `256Mi`\n\nEnsure the pod is in the Running state with all resource constraints applied correctly.",
      "concepts": ["resource management", "pod configuration"],
      "verification": [
        {
          "id": "1",
          "description": "Pod exists with correct resource configuration",
          "verificationScriptFile": "q8_s1_validate_pod.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Resource usage and limits are correct",
          "verificationScriptFile": "q8_s2_validate_resource_usage.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "9",
      "namespace": "default",
      "machineHostname": "datascientest-machine",
      "question": "Create a ConfigMap named `app-config` with the key `APP_COLOR` and value `blue`.\n\nCreate a pod named `config-pod` using the `nginx` image that mounts this ConfigMap as a volume named `config-volume` at `/etc/config`.\n\nVerify that the configuration is correctly accessible within the pod.",
      "concepts": ["configmaps", "volumes", "pod configuration"],
      "verification": [
        {
          "id": "1",
          "description": "ConfigMap and pod exist",
          "verificationScriptFile": "q9_s1_validate_configmap.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "ConfigMap has correct data",
          "verificationScriptFile": "q9_s2_validate_pod.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "3",
          "description": "ConfigMap usage and mounting are correct",
          "verificationScriptFile": "q9_s3_validate_configmap_usage.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    },
    {
      "id": "10",
      "namespace": "default",
      "machineHostname": "datascientest-machine",
      "question": "Create a pod named `health-check` in the `default` namespace using the `nginx` image with the following health check configuration:\n\n- Liveness probe: HTTP GET on path `/` port `80` with initial delay of `5` seconds\n- Readiness probe: HTTP GET on path `/` port `80` with initial delay of `5` seconds\n\nEnsure the pod is running with both probes functioning correctly.",
      "concepts": ["health checks", "pod lifecycle"],
      "verification": [
        {
          "id": "1",
          "description": "Pod exists with health check configuration",
          "verificationScriptFile": "q10_s1_validate_pod.sh",
          "expectedOutput": "0",
          "weightage": 2
        },
        {
          "id": "2",
          "description": "Health check effectiveness is verified",
          "verificationScriptFile": "q10_s2_validate_health_check_effectiveness.sh",
          "expectedOutput": "0",
          "weightage": 3
        }
      ]
    }
  ]
} 